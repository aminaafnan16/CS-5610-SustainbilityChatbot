shiny::runApp()
runApp('C:/Users/ranas/Downloads/R homework/project_website.R')
runApp()
library(pryr)
x <- 1:10
c(address(x), refs(x))
y <- x
c(address(y), refs(y))
x <- 1:5
y <- x
rm(y)
refs(x)
library(pryr)
x <- 1:10
c(address(x), refs(x))
y <- x
c(address(y), refs(y))
x <- 1:5
y <- x
rm(y)
refs(x)
x <- 1:10
c(address(x), refs(x))
y <- x
c(address(y), refs(y))
x <- 1:5
y <- x
rm(y)
x <- data.frame(matrix(runif(100 * 1e4), ncol = 100))
medians <- vapply(x, median, numeric(1))
for(i in seq_along(medians)) {
x[, i] <- x[, i] - medians[i]
}
for(i in 1:5) {
x[, i] <- x[, i] - medians[i]
print(c(address(x), refs(x)))
}
x <- 1:10
c(address(x), refs(x))
y <- x
c(address(y), refs(y))
install.packages("microbenchmark")
library(microbenchmark)
vector_append <- function(n) {
v <- vector(length = n)
for (i in 1:n) {
v[i] <- i
}
return(v)
}
list_append <- function(n) {
l <- list()
for (i in 1:n) {
l[[length(l) + 1]] <- i
}
return(l)
}
vector_insert_middle <- function(n) {
v <- 1:n
for (i in (n / 2 + 1):n) {
v <- insert(v, i, i)
}
return(v)
}
list_insert_middle <- function(n) {
l <- 1:n
for (i in (n / 2 + 1):n) {
l <- insert(l, i, i)
}
return(l)
}
n <- 100000  # Adjust for different data sizes
# Run microbenchmark for performance comparison
results <- microbenchmark(
vector_append(n),
list_append(n),
vector_insert_middle(n),
list_insert_middle(n)
)
library(microbenchmark)
vector_append <- function(n) {
v <- vector(length = n)
for (i in 1:n) {
v[i] <- i
}
return(v)
}
list_append <- function(n) {
l <- list()
for (i in 1:n) {
l[[length(l) + 1]] <- i
}
return(l)
}
# Option 1: Concatenation for vector insertion (efficient for large insertions)
vector_insert_middle_concat <- function(n) {
v <- 1:n
middle <- n %/% 2 + 1
v <- c(v[1:(middle - 1)], i, v[middle:n])  # Concatenate with inserted element
return(v)
}
# Option 2: Slicing and assignment for vector insertion (efficient for few insertions)
vector_insert_middle_slice <- function(n) {
v <- 1:n
middle <- n %/% 2 + 1
v[middle] <- i  # Assign element at the insertion point
return(v)
}
list_insert_middle <- function(n) {
l <- 1:n
for (i in (n / 2 + 1):n) {
l <- insert(l, i, i)  # List insertion using built-in function
}
return(l)
}
n <- 100000  # Adjust for different data sizes
# Run microbenchmark for performance comparison (including both insertion methods for vectors)
results <- microbenchmark(
vector_append(n),
list_append(n),
vector_insert_middle_concat(n),
vector_insert_middle_slice(n),
list_insert_middle(n)
)
library(microbenchmark)
# Function using a loop for summation
sum_loop <- function(n) {
sum <- 0
for (i in 1:n) {
sum <- sum + i
}
return(sum)
}
# Function using sum() function
sum_builtin <- function(n) {
return(sum(1:n))
}
# Define different values of n
n_values <- c(1000, 10000, 100000)
# Run microbenchmark for each n value
results <- lapply(n_values, function(n) {
microbenchmark(
loop_sum = sum_loop(n),
builtin_sum = sum_builtin(n)
)
})
# Print results in a readable format
for (n in n_values) {
cat("Results for n =", n, "\n")
print(results[[match(n, n_values)]])
cat("\n")
}
library(microbenchmark)
# Sample size
n <- 10000
# Create vector and list with random numbers
set.seed(123)  # Set seed for reproducible random numbers
vec <- runif(n)
list_num <- list(runif(n))
# Microbenchmark 1: Accessing 10th element
access_vector <- function() {
return(vec[10])
}
access_list <- function() {
return(list_num[[10]])
}
access_v_time <- timeit(access_vector, n = 1000)
library(microbenchmark)
# Sample size
n <- 10000
# Create vector and list with random numbers
set.seed(123)  # Set seed for reproducible random numbers
vec <- runif(n)
list_num <- list(runif(n))
# Microbenchmark 1: Accessing 10th element
access_vector <- function() {
return(vec[10])
}
access_list <- function() {
return(list_num[[10]])
}
results_access <- microbenchmark(
vector = access_vector(),
list = access_list()
)
library(microbenchmark)
# Sample size
n <- 10000
# Create vector and list with random numbers
set.seed(123)  # Set seed for reproducible random numbers
vec <- runif(n)
list_num <- list(runif(n))
# Microbenchmark 1: Accessing 10th element
access_vector <- function() {
return(vec[10])
}
access_list <- function() {
return(list_num[[10]])
}
results_access <- microbenchmark(
vector = access_vector(),
list = access_list()
)
library(microbenchmark)
# Sample size
n <- 10000
# Create vector and list with random numbers
set.seed(123)  # Set seed for reproducible random numbers
vec <- runif(n)
list_num <- list(runif(n))
# Microbenchmark 1: Accessing 10th element
access_vector <- function() {
return(vec[10])
}
access_list <- function() {
return(list_num[[10]])
}
access_v_time <- timeit(access_vector, n = 1000)
# Load the microbenchmark library
library(microbenchmark)
# Sample size
n <- 10000
# Create vector and list with random numbers
set.seed(123)  # Set seed for reproducible random numbers
vec <- runif(n)
list_num <- list(runif(n))
# Microbenchmark 1: Accessing 10th element
access_v_time <- microbenchmark(vec[10], times = 1000)
access_l_time <- microbenchmark(list_num[[10]], times = 1000)
# Load the microbenchmark library
library(microbenchmark)
# Sample size
n <- 10000
# Create vector and list with random numbers
set.seed(123)  # Set seed for reproducible random numbers
vec <- runif(n)
list_num <- as.list(runif(n))
# Microbenchmark 1: Accessing 10th element
access_v_time <- microbenchmark(vec[10], times = 1000)
if (length(list_num) >= 10) {
access_l_time <- microbenchmark(list_num[[10]], times = 1000)
print("Accessing 10th element:")
print("  Vector:", access_v_time)
print("  List:", access_l_time)
} else {
print("The list does not have 10 elements.")
}
# Load the microbenchmark library
library(microbenchmark)
# Sample size
n <- 10000
# Create vector and list with random numbers
set.seed(123)  # Set seed for reproducible random numbers
vec <- runif(n)
list_num <- as.list(runif(n))
# Microbenchmark 1: Accessing 10th element
access_v_time <- microbenchmark(vec[10], times = 1000)
if (length(list_num) >= 10) {
access_l_time <- microbenchmark(list_num[[10]], times = 1000)
cat("Accessing 10th element:\n")
cat("  Vector:\n")
summary(access_v_time)
cat("  List:\n")
summary(access_l_time)
} else {
print("The list does not have 10 elements.")
}
cat("\n")
# Microbenchmark 2: Appending a new element
append_v_time <- microbenchmark(c(vec, runif(1)), times = 1000)
append_l_time <- microbenchmark(list_num <- c(list_num, list(runif(1))), times = 1000)
cat("Appending a new element:\n")
cat("  Vector:\n")
summary(append_v_time)
cat("  List:\n")
summary(append_l_time)
# Load the microbenchmark library
library(microbenchmark)
# Sample size
n <- 10000
# Create vector and list with random numbers
set.seed(123)  # Set seed for reproducible random numbers
vec <- runif(n)
list_num <- as.list(runif(n))
# Microbenchmark 1: Accessing 10th element
access_v_time <- microbenchmark(vec[10], times = 1000)
if (length(list_num) >= 10) {
access_l_time <- microbenchmark(list_num[[10]], times = 1000)
cat("Accessing 10th element:\n")
cat("  Vector:\n")
summary(access_v_time)
cat("  List:\n")
summary(access_l_time)
} else {
print("The list does not have 10 elements.")
}
cat("\n")
# Microbenchmark 2: Appending a new element
append_v_time <- microbenchmark(c(vec, runif(1)), times = 1000)
append_l_time <- microbenchmark(list_num <- c(list_num, list(runif(1))), times = 1000)
cat("Appending a new element:\n")
cat("  Vector:\n")
summary(append_v_time)
cat("  List:\n")
summary(append_l_time)
